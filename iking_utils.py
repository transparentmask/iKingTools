#!/usr/bin/env python
# -*- encoding: utf-8 -*-
import random
import math

encode_table = bytearray([
    0x70, 0xB6, 0xF5, 0xD9, 0x73, 0x96, 0x6A, 0xB9, 0x89, 0x65, 0x54, 0xC1, 0x95, 0x75, 0x2F, 0x5D,
    0xD3, 0xFA, 0xAC, 0x35, 0x7A, 0x07, 0x58, 0x98, 0xDD, 0x6F, 0xDE, 0xDB, 0x7E, 0x68, 0xAE, 0xEF,
    0x1E, 0xA3, 0xC8, 0x91, 0x39, 0x33, 0x4A, 0xC2, 0x99, 0x9F, 0x83, 0x2D, 0x14, 0xB2, 0x8A, 0xE7,
    0xAD, 0x37, 0x1C, 0x26, 0x3E, 0x76, 0xBE, 0x1D, 0xE4, 0x9C, 0xF7, 0x62, 0x04, 0xA5, 0x51, 0x22,
    0x48, 0x1A, 0xB3, 0x81, 0x4D, 0xFE, 0x43, 0xE5, 0x9D, 0xC6, 0x13, 0xB1, 0x78, 0x9E, 0x9A, 0x24,
    0xD4, 0xB4, 0x4B, 0x15, 0x29, 0x09, 0x30, 0x0D, 0xA6, 0x27, 0x71, 0xA9, 0xCB, 0xC3, 0xCC, 0x16,
    0xDC, 0x7F, 0x94, 0x28, 0x7C, 0xD7, 0x0E, 0x19, 0xA0, 0x21, 0xCA, 0x17, 0xBF, 0x63, 0x3A, 0x93,
    0x18, 0x84, 0xA7, 0x40, 0x8C, 0xD5, 0x4E, 0x31, 0xFB, 0xC0, 0xDA, 0xC7, 0x80, 0xA8, 0xDF, 0x5B,
    0x25, 0x6D, 0x85, 0xA1, 0x44, 0x92, 0xBA, 0xE1, 0xB5, 0x86, 0xF6, 0x72, 0xE8, 0x32, 0x05, 0xFF,
    0xB7, 0xAA, 0x3F, 0x41, 0x82, 0x8D, 0x74, 0x7B, 0x4C, 0x4F, 0x42, 0xCD, 0xF0, 0x1B, 0x2A, 0x1F,
    0x87, 0xAB, 0xB8, 0xCE, 0x3B, 0x77, 0xAF, 0xEC, 0xF3, 0xA2, 0x5E, 0xE0, 0xD0, 0x61, 0xD8, 0x88,
    0x0B, 0x20, 0xC4, 0x8B, 0xA4, 0x34, 0x06, 0xEE, 0x7D, 0x45, 0xBB, 0x6E, 0x5F, 0xE2, 0x8E, 0xE3,
    0x8F, 0x38, 0xB0, 0xC5, 0xBC, 0x59, 0xBD, 0x9B, 0xF9, 0x0A, 0x79, 0xC9, 0x6B, 0x50, 0x52, 0x90,
    0x64, 0x0F, 0x01, 0x08, 0x46, 0x0C, 0xF8, 0xCF, 0x53, 0xD1, 0x2B, 0xD2, 0x97, 0xD6, 0xE6, 0x10,
    0xE9, 0x3C, 0xEA, 0xEB, 0xED, 0xF1, 0x23, 0xF2, 0xF4, 0xFC, 0x55, 0xFD, 0x00, 0x02, 0x66, 0x47,
    0x03, 0x67, 0x56, 0x11, 0x6C, 0x49, 0x12, 0x2C, 0x2E, 0x36, 0x60, 0x3D, 0x57, 0x5A, 0x5C, 0x69,
])

decode_table = bytearray([
    0xEC, 0xD2, 0xED, 0xF0, 0x3C, 0x8E, 0xB6, 0x15, 0xD3, 0x55, 0xC9, 0xB0, 0xD5, 0x57, 0x66, 0xD1,
    0xDF, 0xF3, 0xF6, 0x4A, 0x2C, 0x53, 0x5F, 0x6B, 0x70, 0x67, 0x41, 0x9D, 0x32, 0x37, 0x20, 0x9F,
    0xB1, 0x69, 0x3F, 0xE6, 0x4F, 0x80, 0x33, 0x59, 0x63, 0x54, 0x9E, 0xDA, 0xF7, 0x2B, 0xF8, 0x0E,
    0x56, 0x77, 0x8D, 0x25, 0xB5, 0x13, 0xF9, 0x31, 0xC1, 0x24, 0x6E, 0xA4, 0xE1, 0xFB, 0x34, 0x92,
    0x73, 0x93, 0x9A, 0x46, 0x84, 0xB9, 0xD4, 0xEF, 0x40, 0xF5, 0x26, 0x52, 0x98, 0x44, 0x76, 0x99,
    0xCD, 0x3E, 0xCE, 0xD8, 0x0A, 0xEA, 0xF2, 0xFC, 0x16, 0xC5, 0xFD, 0x7F, 0xFE, 0x0F, 0xAA, 0xBC,
    0xFA, 0xAD, 0x3B, 0x6D, 0xD0, 0x09, 0xEE, 0xF1, 0x1D, 0xFF, 0x06, 0xCC, 0xF4, 0x81, 0xBB, 0x19,
    0x00, 0x5A, 0x8B, 0x04, 0x96, 0x0D, 0x35, 0xA5, 0x4C, 0xCA, 0x14, 0x97, 0x64, 0xB8, 0x1C, 0x61,
    0x7C, 0x43, 0x94, 0x2A, 0x71, 0x82, 0x89, 0xA0, 0xAF, 0x08, 0x2E, 0xB3, 0x74, 0x95, 0xBE, 0xC0,
    0xCF, 0x23, 0x85, 0x6F, 0x62, 0x0C, 0x05, 0xDC, 0x17, 0x28, 0x4E, 0xC7, 0x39, 0x48, 0x4D, 0x29,
    0x68, 0x83, 0xA9, 0x21, 0xB4, 0x3D, 0x58, 0x72, 0x7D, 0x5B, 0x91, 0xA1, 0x12, 0x30, 0x1E, 0xA6,
    0xC2, 0x4B, 0x2D, 0x42, 0x51, 0x88, 0x01, 0x90, 0xA2, 0x07, 0x86, 0xBA, 0xC4, 0xC6, 0x36, 0x6C,
    0x79, 0x0B, 0x27, 0x5D, 0xB2, 0xC3, 0x49, 0x7B, 0x22, 0xCB, 0x6A, 0x5C, 0x5E, 0x9B, 0xA3, 0xD7,
    0xAC, 0xD9, 0xDB, 0x10, 0x50, 0x75, 0xDD, 0x65, 0xAE, 0x03, 0x7A, 0x1B, 0x60, 0x18, 0x1A, 0x7E,
    0xAB, 0x87, 0xBD, 0xBF, 0x38, 0x47, 0xDE, 0x2F, 0x8C, 0xE0, 0xE2, 0xE3, 0xA7, 0xE4, 0xB7, 0x1F,
    0x9C, 0xE5, 0xE7, 0xA8, 0xE8, 0x02, 0x8A, 0x3A, 0xD6, 0xC8, 0x11, 0x78, 0xE9, 0xEB, 0x45, 0x8F,
])


class iKingUtils:
    @staticmethod
    def gen_random(min=0x00, max=0xFF):
        rand = random.random()
        rand = rand * (max - min) + min
        rand = math.ceil(rand) - 1
        return int(rand)

    KEY = None
    NEED_SEND_KEY = True

    @staticmethod
    def int2hex(value, length=4, bigEndian=True):
        value = int(value)
        hex_ba = bytearray(length)
        for i in range(length):
            hex_ba[length - i - 1] = (value >> (i * 8)) & 0xFF

        return hex_ba if bigEndian else bytearray(reversed(hex_ba))

    @staticmethod
    def hex2int(hex_ba, bigEndian=True, highAsFlag=False):
        ba = hex_ba if bigEndian else bytearray(reversed(hex_ba))

        value = 0
        length = len(ba)
        r = range(length) if highAsFlag is False else range(1, length)
        for i in r:
            value += ba[i] << ((length - i - 1) * 8)
        if highAsFlag is True and ba[0] == 0xFF:
            value = value - 0xFF

        return value

    @staticmethod
    def export_string(data, start=0, terminator='\x00'):
        t = data[start:].find(terminator) + start + 1
        d = data[start:t]
        return (d[:-1], t)

    @staticmethod
    def fix_string_color(data):
        i = 0
        while i < (len(data) - 5):
            if data[i] == 0x5E and data[i + 1] == 0x5B and data[i + 4] == 0x6D:
                data[i] = 0x1B
                if data[i + 2] == 0x33 and data[i + 3] == 0x30:
                    data[i + 2] = 0x34
                    data[i + 3] = 0x37
                i = i + 5
            i = i + 1
        return data

    @staticmethod
    def position(x, y):
        return x * 65536 + y

    @staticmethod
    def encode_cal(base, prev):
        tmp = 1 << (base & 0x07)
        if (tmp & base) == 0:
            tmp = 1 << (base & 0x03)
            if (tmp & base) == 0:
                if prev >= base:
                    prev = prev - base
                else:
                    prev = 0x100 - (base - prev)
            else:
                prev = prev + base
        else:
            prev = prev ^ base
        prev = prev & 0xFF
        return prev

    @staticmethod
    def decode_cal(base, next_data):
        tmp = 1 << (base & 0x07)
        if (tmp & base) == 0:
            tmp = 1 << (base & 0x03)
            if (tmp & base) == 0:
                next_data = next_data + base
            else:
                if next_data >= base:
                    next_data = next_data - base
                else:
                    next_data = 0x100 - (base - next_data)
        else:
            next_data = next_data ^ base
        next_data = next_data & 0xFF
        return next_data

    @staticmethod
    def encode(data):
        buffer_offset = 0
        tmp = None
        if iKingUtils.NEED_SEND_KEY:
            buf = bytearray(len(data) + 2)
            buf[0] = iKingUtils.gen_random() & 0x7F

            next_it = iKingUtils.gen_random(max=0x7FFF)
            next_it = ((next_it % 0xFA) + 2) & 0xFF
            tmp = iKingUtils.encode_cal(buf[0], next_it)
            buf[1] = encode_table[tmp]
            buffer_offset = 2
            iKingUtils.NEED_SEND_KEY = False
        else:
            buf = bytearray(len(data))
            tmp = iKingUtils.KEY

        for (index, char) in enumerate(data):
            tmp = iKingUtils.encode_cal(tmp, char)
            buf[index + buffer_offset] = encode_table[tmp]
        iKingUtils.KEY = tmp
        return buf

    @staticmethod
    def decode(data):
        buf = bytearray(len(data) - 2)
        for index in range(len(data) - 2):
            d1 = decode_table[data[index + 1]]
            d2 = decode_table[data[index + 2]]
            buf[index] = iKingUtils.decode_cal(d1, d2)
        return buf

    @staticmethod
    def dump_bytearray(data_ba, prefix="dump", ret=False, ret_full=False):
        s = " ".join(map(lambda b: "0x%.2X" % b, data_ba))
        ss = '%s(0x%.2X): %s' % (prefix, len(data_ba), s)
        if ret_full:
            return ss
        elif ret:
            return s
        else:
            print ss

    @staticmethod
    def dump_string(type_, msg, ret=False):
        s = '%s     \t%s' % (type_, msg)
        if ret:
            return s
        else:
            print s

    @staticmethod
    def move_cal(x, y, direction):
        # 0->e, 1->w, 2->s, 3->n, 4->ne, 5->se, 6->nw, 7->sw
        if direction == 0:
            x = x + 1
        elif direction == 1:
            x = x - 1
        elif direction == 2:
            y = y + 2
        elif direction == 3:
            y = y - 2
        else:
            y_odd = (y % 2 == 1)
            if direction == 4:
                y = y - 1
                if y_odd:
                    x = x + 1
            elif direction == 5:
                y = y + 1
                if y_odd:
                    x = x + 1
            elif direction == 6:
                y = y - 1
                if not y_odd:
                    x = x - 1
            elif direction == 7:
                y = y + 1
                if not y_odd:
                    x = x - 1
        return (x, y)

    @staticmethod
    def direction_desc(direction):
        # 0->e, 1->w, 2->s, 3->n, 4->ne, 5->se, 6->nw, 7->sw
        dd = {
            0x00: "e",
            0x01: "w",
            0x02: "s",
            0x03: "n",
            0x04: "ne",
            0x05: "se",
            0x06: "nw",
            0x07: "sw",
            0xFF: "",
        }
        return dd[direction]
